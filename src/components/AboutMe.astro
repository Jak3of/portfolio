---
import Section from "./Section.astro";
---

<Section id="about" color="white">
  <header
    slot="header"
    class="flex flex-col xl:pl-[20%] gap-6 w-[50%] text-start text-white px-16 pt-56"
  >
    <h2 class="text-white text-[45px] font-titilium">Nelson Correa</h2>
    <p class="text-white text-[20px] font-medium">Full Stack Developer</p>
  </header>

  <article
    slot="article"
    class="flex flex-col gap-6 text-start w-[50%] text-white pt-72 pr-2 md:pr-20"
  >
    <p class="text-white text-[18px] font-medium">
      ¡Hola! Soy un desarrollador que disfruta creando experiencias web únicas. 
      Me encanta enfrentarme a nuevos desafíos y encontrar formas creativas de 
      resolver problemas a través del código.
    </p>
    <p class="text-white text-[18px] font-medium">
      Cada proyecto es una oportunidad para aprender algo nuevo y mejorar. 
      Ya sea construyendo una aplicación web completa o optimizando código existente, 
      siempre busco aportar valor y calidad en cada línea de código que escribo.
    </p>
    <div class="flex gap-4 mt-4">
      <span class="text-gray-300">
        <i class="fas fa-map-marker-alt mr-2"></i>
        Lima, Perú
      </span>
      <span class="text-gray-300">
        <i class="fas fa-envelope mr-2"></i>
        nelsonc897@gmail.com
      </span>
    </div>
  </article>

  <div
    slot="background"
    class="h-full w-full object-cover object-center bg-gradient-to-br from-blue-950 to-slate-900"
    id="bg-image-models"
  >
    <div
      class="bg-black bg-opacity-30 h-full w-full border-b-[100%] border-l-[100%]"
    >
      <canvas id="myCanvas" class=""></canvas>
    </div>
  </div>
</Section>

<style>
  @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');
</style>

<script>
  function isEdge() {
    if (
      navigator.userAgent.indexOf("Edge") > -1 ||
      navigator.userAgent.indexOf("Edg") > -1
    ) {
      return true;
    } else {
      return false;
    }
  }

  const canvas = document.getElementById("myCanvas") as HTMLCanvasElement;

  if (canvas) {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const canvasContext = () => {
      const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
      if (ctx) {
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(canvas.width / 2, 0);
        ctx.lineTo(canvas.width / 3, canvas.height);
        ctx.lineTo(0, canvas.height);
        ctx.closePath();
        ctx.fillStyle = "black";
        ctx.globalAlpha = 0.3;
        ctx.fill();
      }
    };

    canvasContext();
    window.addEventListener("resize", () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      canvasContext();
    });
  }
</script>
